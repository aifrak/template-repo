name: CI

on: [push, workflow_dispatch]

jobs:
  ci:
    name: CI
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2

      # —————————————————————————————————————————————— #
      #                     Docker                     #
      # —————————————————————————————————————————————— #

      # Docker Compose is used by "./run --dc-ci dc:*"
      - name: Add environment variables used by Docker Compose
        run: |
          echo "USER_UID=$(id -u)" >> $GITHUB_ENV
          echo "USER_GID=$(id -g)" >> $GITHUB_ENV

      - name: Add output parameters used by Docker build
        id: docker-params
        run: |
          image_target="ci"
          image_repository="aifrak/template-repo"

          echo "::set-output name=image-target::$image_target"
          echo "::set-output name=image-tag::$image_repository:$image_target"
          echo "::set-output name=cache-old::/tmp/.buildx-cache"
          echo "::set-output name=cache-new::/tmp/.buildx-cache-new"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0

      - name: Cache Docker layers
        uses: actions/cache@v3.0.2
        with:
          path: ${{ steps.docker-params.outputs.cache-old }}
          key: |
            ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image and Docker cache
        uses: docker/build-push-action@v3.0.0
        with:
          load: true
          target: ${{ steps.docker-params.outputs.image-target }}
          tags: ${{ steps.docker-params.outputs.image-tag }}
          build-args: |
            USER_UID=${{ env.USER_UID }}
            USER_GID=${{ env.USER_GID }}
          cache-from: type=local,src=${{ steps.docker-params.outputs.cache-old }}
          cache-to: type=local,dest=${{ steps.docker-params.outputs.cache-new }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move Docker cache
        run: |
          rm -rf ${{ steps.docker-params.outputs.cache-old }}
          mv ${{ steps.docker-params.outputs.cache-new }} ${{ steps.docker-params.outputs.cache-old }}

      - name: Starts all docker services
        run: |
          ./run --dc-ci dc:up

      # —————————————————————————————————————————————— #
      #                    Versions                    #
      # —————————————————————————————————————————————— #

      - name: Get versions
        id: versions
        run: |
          echo "::set-output name=node::$(./run --dc-ci dc:exec npm -v)"

      # —————————————————————————————————————————————— #
      #                      Cache                     #
      # —————————————————————————————————————————————— #

      - name: Cache node modules
        uses: actions/cache@v3.0.2
        id: node-modules-cache
        with:
          path: |
            **/node_modules
            **/npm_cache
            **/.cspellcache
            **/.eslintcache
            **/.stylelintcache
          key: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node }}-

      # —————————————————————————————————————————————— #
      #                  Dependencies                  #
      # —————————————————————————————————————————————— #

      - name: Install node modules
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: |
          ./run --dc-ci dc:exec bash -c "npm ci --quiet"

      # —————————————————————————————————————————————— #
      #                   Application                  #
      # —————————————————————————————————————————————— #

      - name: Test and lint
        run: |
          ./run --dc-ci dc:exec ./run check

      - name: Set commit information
        id: commit
        run: |
          is_contributor_dependabot="false"

          if ./run git:commit:is-contributor-dependabot; then is_contributor_dependabot="true"; fi

          echo "::set-output name=is-contributor-dependabot::$is_contributor_dependabot"

      - name: Lint git commit message
        if: >-
          github.actor != 'dependabot[bot]'
          && steps.commit.outputs.is-contributor-dependabot == 'false'
        run: |
          ./run --dc-ci dc:exec ./run git:commit:lint
